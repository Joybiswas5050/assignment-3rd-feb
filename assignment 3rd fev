{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9b056bce-d173-4ad2-81b4-e1ce2aa4843c",
   "metadata": {},
   "outputs": [],
   "source": [
    "###question no 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "86799edf-994f-45eb-be5d-232f6dcf41e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def odd_numbers():\n",
    "    odd_nums = []\n",
    "    for i in range(1, 26):\n",
    "        if i % 2 != 0:\n",
    "            odd_nums.append(i)\n",
    "    return odd_nums\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "008d9c08-4394-4762-8eb7-dcf794259fa5",
   "metadata": {},
   "outputs": [],
   "source": [
    "###question no 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a26f43ea-7f5f-4e04-87bf-9a62eb432b60",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 5) (813260277.py, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[5], line 5\u001b[0;36m\u001b[0m\n\u001b[0;31m    Here's an example function that takes in a variable number of arguments using *args and returns their sum:\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unterminated string literal (detected at line 5)\n"
     ]
    }
   ],
   "source": [
    "args and **kwargs are used in Python functions to allow for variable-length arguments.\n",
    "\n",
    "*args is used to pass a variable number of non-keyworded arguments to a function. It allows a function to accept any number of arguments without having to specify them beforehand. The arguments are passed to the function as a tuple.\n",
    "\n",
    "Here's an example function that takes in a variable number of arguments using *args and returns their sum:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b15a5e83-bb00-4644-b257-bbf119de8a9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "30\n"
     ]
    }
   ],
   "source": [
    "def sum_args(*args):\n",
    "    return sum(args)\n",
    "\n",
    "# Example usage\n",
    "print(sum_args(1, 2, 3, 4))  # Output: 10\n",
    "print(sum_args(5, 10, 15))  # Output: 30\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "aaff1d2d-143a-47f8-a2c2-8635af711305",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 3) (1415136021.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[7], line 3\u001b[0;36m\u001b[0m\n\u001b[0;31m    Here's an example function that takes in a variable number of keyword arguments using **kwargs and prints out their values:\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unterminated string literal (detected at line 3)\n"
     ]
    }
   ],
   "source": [
    "**kwargs, on the other hand, is used to pass a variable number of keyword arguments to a function. It allows a function to accept any number of keyword arguments without having to specify them beforehand. The arguments are passed to the function as a dictionary.\n",
    "\n",
    "Here's an example function that takes in a variable number of keyword arguments using **kwargs and prints out their values:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "242150a7-77b7-4210-80cd-cef0cf9f7e75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "name = Alice\n",
      "age = 25\n",
      "city = New York\n",
      "color = red\n",
      "size = small\n"
     ]
    }
   ],
   "source": [
    "def print_kwargs(**kwargs):\n",
    "    for key, value in kwargs.items():\n",
    "        print(f\"{key} = {value}\")\n",
    "\n",
    "# Example usage\n",
    "print_kwargs(name=\"Alice\", age=25, city=\"New York\")  \n",
    "# Output: name = Alice, age = 25, city = New York\n",
    "print_kwargs(color=\"red\", size=\"small\")  \n",
    "# Output: color = red, size = small\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e4033434-ba8c-43e6-9f91-ebe6cd996ab2",
   "metadata": {},
   "outputs": [],
   "source": [
    "###question no 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f080b69e-2596-424e-afcf-d4582095b68a",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (250643842.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[11], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    In Python, an iterator is an object that implements the iterator protocol, which consists of the __iter__ method that returns the iterator object and the __next__ method that returns the next element in the iteration.\u001b[0m\n\u001b[0m       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "In Python, an iterator is an object that implements the iterator protocol, which consists of the __iter__ method that returns the iterator object and the __next__ method that returns the next element in the iteration.\n",
    "\n",
    "To initialize an iterator object in Python, we can use the iter() method, which takes an iterable as an argument and returns an iterator. To iterate over the elements of the iterator, we can use the next() method, which returns the next element in the iteration.\n",
    "\n",
    "To print the first five elements of the list [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], we can use the following code:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7aec107b-e230-49a1-a6d4-a59ff8edb95c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "my_list = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n",
    "my_iterator = iter(my_list)\n",
    "for i in range(5):\n",
    "    print(next(my_iterator))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5ac56b2d-a225-45d0-a598-bfe80b8f80f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "###question no 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ecc8dc74-bfa6-4893-a129-8037dcf93a7b",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 5) (3725272205.py, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[15], line 5\u001b[0;36m\u001b[0m\n\u001b[0;31m    Here's an example of a simple generator function that generates the first n even numbers:\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unterminated string literal (detected at line 5)\n"
     ]
    }
   ],
   "source": [
    "A generator function in Python is a type of function that uses the yield keyword to return an iterator object that can be used to generate a sequence of values on-the-fly, one at a time, without needing to generate the entire sequence at once. Each time the next value is requested from the iterator, the generator function resumes execution from where it left off, remembering the state of its variables.\n",
    "\n",
    "The yield keyword is used to \"yield\" (i.e. return) a value from the generator function without ending the function's execution, allowing the function to be resumed from that point in the future. This means that the function can generate a new value each time the iterator's next() method is called, while still retaining its current state.\n",
    "\n",
    "Here's an example of a simple generator function that generates the first n even numbers:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "112f422a-fda7-42c5-a987-4464d35cabcc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def even_numbers(n):\n",
    "    i = 0\n",
    "    while i < n:\n",
    "        yield i * 2\n",
    "        i += 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ed56f92a-379b-4002-9ffa-e99853642b6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "###question no 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4e0c98e9-cc94-4835-8ca8-0e37ea24412f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def prime_numbers():\n",
    "    for num in range(2, 1000):\n",
    "        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n",
    "            yield num\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "af034d62-474a-4e9c-9833-a8e29d87a41e",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "Missing parentheses in call to 'print'. Did you mean print(...)? (989889159.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[23], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    This will print the first 20 prime numbers, which are:\u001b[0m\n\u001b[0m              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m Missing parentheses in call to 'print'. Did you mean print(...)?\n"
     ]
    }
   ],
   "source": [
    "This will print the first 20 prime numbers, which are:\n",
    "\n",
    "2\n",
    "3\n",
    "5\n",
    "7\n",
    "11\n",
    "13\n",
    "17\n",
    "19\n",
    "23\n",
    "29\n",
    "31\n",
    "37\n",
    "41\n",
    "43\n",
    "47\n",
    "53\n",
    "59\n",
    "61\n",
    "67\n",
    "71\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "19216cb3-1f9f-4c15-a03e-7b28af1d6160",
   "metadata": {},
   "outputs": [],
   "source": [
    "###question no 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ff96f081-7f03-4e7e-b71f-6c11af43cd2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "1\n",
      "2\n",
      "3\n",
      "5\n",
      "8\n",
      "13\n",
      "21\n",
      "34\n"
     ]
    }
   ],
   "source": [
    "a = 0\n",
    "b = 1\n",
    "count = 0\n",
    "\n",
    "while count < 10:\n",
    "    print(a)\n",
    "    c = a + b\n",
    "    a = b\n",
    "    b = c\n",
    "    count += 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2111b0b6-ad2c-4134-ba23-665007f3a864",
   "metadata": {},
   "outputs": [],
   "source": [
    "###question no 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9d9ec4e2-8b9b-4448-b048-8308ea91e64e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['p', 'w', 's', 'k', 'i', 'l', 'l', 's']"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[char for char in 'pwskills']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d0d3a92b-c320-4308-befd-d09c3a49b809",
   "metadata": {},
   "outputs": [],
   "source": [
    "###question no 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "62299e6d-93d8-4a16-97f2-4fa425270ef6",
   "metadata": {},
   "outputs": [],
   "source": [
    "number = int(input(\"Enter a number: \"))\n",
    "temp = number\n",
    "reverse_number = 0\n",
    "\n",
    "while temp > 0:\n",
    "    remainder = temp % 10\n",
    "    reverse_number = (reverse_number * 10) + remainder\n",
    "    temp = temp // 10\n",
    "\n",
    "if number == reverse_number:\n",
    "    print(\"The number is a palindrome.\")\n",
    "else:\n",
    "    print(\"The number is not a palindrome.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "016e107d-e73f-49ef-a8d1-c9130b60773d",
   "metadata": {},
   "outputs": [],
   "source": [
    "###question no 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d1941fc-7adc-4d15-a125-b3d0ddf30ed6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
